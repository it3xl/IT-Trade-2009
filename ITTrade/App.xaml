<Application x:Class="ITTrade.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:tk="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit"
	xmlns:ValueConverts="clr-namespace:ITTrade.IT.WPF.ValueConverts"
	xmlns:ValidationRules="clr-namespace:IT.WPF.ValidationRules"
	StartupUri="TradeWindow.xaml"
	>
	
    <Application.Resources>
         
    	<ResourceDictionary>
    		<ResourceDictionary.MergedDictionaries>
    			<ResourceDictionary Source="Simple Styles.xaml"/>
    		</ResourceDictionary.MergedDictionaries>
			
			<!-- ValueConverts -->

			<ValueConverts:DateTimeConverter x:Key="DateTimeConverter" />
			<!--<ValueConverts:IntConverter x:Key="IntConverter" />-->
			<ValueConverts:IntPositiveConverter x:Key="IntPositiveConverter" />
			<ValueConverts:DecimalPositiveConverter x:Key="DecimalPositiveConverter" />
			
			<!-- Используется для отладочных целей.-->
			<ValueConverts:DummyDebugConverter x:Key="DummyDebugConverter" />
			
			<!--ValueConverts:UIntConverter x:Key="UIntConverter" />-->
			<ValueConverts:DecimalConverter x:Key="DecimalConverter" />
			<ValueConverts:DoubleConverter x:Key="DoubleConverter" />
			<!--
			проверка на положительность передана в валидаторы бизнес-объекта
			<ValueConverts:UDoubleConverter x:Key="UDoubleConverter" />-->
			<ValueConverts:StringToUpperCaseConverter x:Key="StringToUpperCaseConverter" />
			<!--<ValueConverts:MoneyConverter x:Key="MoneyConverter" />-->
			<ValueConverts:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
			<ValueConverts:ValidationErrorMessageConverter x:Key="ValidationErrorMessageConverter" />
			<ValueConverts:ColorForZeroConverter x:Key="ColorForZeroConverter" />


			
			<!-- ValidationRules -->

			
			
			
			<!-- Styles -->
			
			<Style x:Key="Texted" TargetType="TextBox">
				<Setter Property="IsReadOnly" Value="True" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="IsTabStop" Value="False" />
			</Style>
			
			<Style x:Key="TextedRTB" TargetType="RichTextBox">
				<Setter Property="IsReadOnly" Value="True" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="IsTabStop" Value="False" />
			</Style>

			<LinearGradientBrush x:Key="whiteBackBrush" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0" Color="#80FFFFFF" />
				<GradientStop Offset="1" Color="#80F0F0FB" />
			</LinearGradientBrush>

			<Style TargetType="tk:DataGridCell" BasedOn="{StaticResource {x:Type tk:DataGridCell}}">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="VerticalAlignment" Value="Center" />
				<Style.Triggers>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
						<Setter Property="Foreground" Value="Black" />
					</Trigger>
					<Trigger Property="IsKeyboardFocusWithin" Value="True">
						<Setter Property="Background" Value="{StaticResource whiteBackBrush}" />
						<Setter Property="BorderBrush" Value="{DynamicResource {x:Static tk:DataGrid.FocusBorderBrushKey}}" />
						<Setter Property="Foreground" Value="Black" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="NoBorder" TargetType="tk:DataGridCell" BasedOn="{StaticResource {x:Type tk:DataGridCell}}">
				<Setter Property="IsTabStop" Value="False" />
				<Style.Triggers>
					<Trigger Property="IsKeyboardFocusWithin" Value="True">
						<Setter Property="Background" Value="{StaticResource whiteBackBrush}" />
						<Setter Property="BorderBrush" Value="Transparent" />
						<Setter Property="Foreground" Value="Black" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="tk:DataGridRow">
				<Setter Property="SnapsToDevicePixels" Value="True" />
				<Setter Property="Background" Value="White" />
				<Style.Triggers>
					<Trigger Property="ItemsControl.AlternationIndex" Value="2">
						<Setter Property="Background" Value="#EAEAEA" />
					</Trigger>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="Background" Value="MediumSeaGreen" />
					</Trigger>
				</Style.Triggers>
			</Style>


			<Style TargetType="{x:Type TextBox}">
				<Style.Triggers>
					<Trigger Property="Validation.HasError" Value="True">
						<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0], Converter={StaticResource ValidationErrorMessageConverter}}"></Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="{x:Type ComboBox}">
				<Style.Triggers>
					<Trigger Property="Validation.HasError" Value="True">
						<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0], Converter={StaticResource ValidationErrorMessageConverter}}"></Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style TargetType="{x:Type CheckBox}">
				<Style.Triggers>
					<Trigger Property="Validation.HasError" Value="True">
						<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0], Converter={StaticResource ValidationErrorMessageConverter}}"></Setter>
					</Trigger>
				</Style.Triggers>
			</Style>




		</ResourceDictionary>
		
         
    </Application.Resources>
</Application>
